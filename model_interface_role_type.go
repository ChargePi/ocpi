/*
OCPI versions module

Specification for OCPIs versions handlers

API version: 2.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package OCPI

import (
	"encoding/json"
	"fmt"
)

// InterfaceRoleType Interface role endpoint implements.
type InterfaceRoleType string

// List of interfaceRoleType
const (
	SENDER InterfaceRoleType = "SENDER"
	RECEIVER InterfaceRoleType = "RECEIVER"
)

// All allowed values of InterfaceRoleType enum
var AllowedInterfaceRoleTypeEnumValues = []InterfaceRoleType{
	"SENDER",
	"RECEIVER",
}

func (v *InterfaceRoleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InterfaceRoleType(value)
	for _, existing := range AllowedInterfaceRoleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InterfaceRoleType", value)
}

// NewInterfaceRoleTypeFromValue returns a pointer to a valid InterfaceRoleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInterfaceRoleTypeFromValue(v string) (*InterfaceRoleType, error) {
	ev := InterfaceRoleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InterfaceRoleType: valid values are %v", v, AllowedInterfaceRoleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InterfaceRoleType) IsValid() bool {
	for _, existing := range AllowedInterfaceRoleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to interfaceRoleType value
func (v InterfaceRoleType) Ptr() *InterfaceRoleType {
	return &v
}

type NullableInterfaceRoleType struct {
	value *InterfaceRoleType
	isSet bool
}

func (v NullableInterfaceRoleType) Get() *InterfaceRoleType {
	return v.value
}

func (v *NullableInterfaceRoleType) Set(val *InterfaceRoleType) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceRoleType) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceRoleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceRoleType(val *InterfaceRoleType) *NullableInterfaceRoleType {
	return &NullableInterfaceRoleType{value: val, isSet: true}
}

func (v NullableInterfaceRoleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceRoleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

