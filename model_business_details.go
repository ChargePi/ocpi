/*
OCPI locations module

Specification for OCPIs locations handlers

API version: 2.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package OCPI

import (
	"encoding/json"
)

// checks if the BusinessDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BusinessDetails{}

// BusinessDetails struct for BusinessDetails
type BusinessDetails struct {
	Name string `json:"name"`
	Website *string `json:"website,omitempty"`
	Logo *BusinessDetailsLogo `json:"logo,omitempty"`
}

// NewBusinessDetails instantiates a new BusinessDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBusinessDetails(name string) *BusinessDetails {
	this := BusinessDetails{}
	this.Name = name
	return &this
}

// NewBusinessDetailsWithDefaults instantiates a new BusinessDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBusinessDetailsWithDefaults() *BusinessDetails {
	this := BusinessDetails{}
	return &this
}

// GetName returns the Name field value
func (o *BusinessDetails) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BusinessDetails) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BusinessDetails) SetName(v string) {
	o.Name = v
}

// GetWebsite returns the Website field value if set, zero value otherwise.
func (o *BusinessDetails) GetWebsite() string {
	if o == nil || IsNil(o.Website) {
		var ret string
		return ret
	}
	return *o.Website
}

// GetWebsiteOk returns a tuple with the Website field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessDetails) GetWebsiteOk() (*string, bool) {
	if o == nil || IsNil(o.Website) {
		return nil, false
	}
	return o.Website, true
}

// HasWebsite returns a boolean if a field has been set.
func (o *BusinessDetails) HasWebsite() bool {
	if o != nil && !IsNil(o.Website) {
		return true
	}

	return false
}

// SetWebsite gets a reference to the given string and assigns it to the Website field.
func (o *BusinessDetails) SetWebsite(v string) {
	o.Website = &v
}

// GetLogo returns the Logo field value if set, zero value otherwise.
func (o *BusinessDetails) GetLogo() BusinessDetailsLogo {
	if o == nil || IsNil(o.Logo) {
		var ret BusinessDetailsLogo
		return ret
	}
	return *o.Logo
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessDetails) GetLogoOk() (*BusinessDetailsLogo, bool) {
	if o == nil || IsNil(o.Logo) {
		return nil, false
	}
	return o.Logo, true
}

// HasLogo returns a boolean if a field has been set.
func (o *BusinessDetails) HasLogo() bool {
	if o != nil && !IsNil(o.Logo) {
		return true
	}

	return false
}

// SetLogo gets a reference to the given BusinessDetailsLogo and assigns it to the Logo field.
func (o *BusinessDetails) SetLogo(v BusinessDetailsLogo) {
	o.Logo = &v
}

func (o BusinessDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BusinessDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Website) {
		toSerialize["website"] = o.Website
	}
	if !IsNil(o.Logo) {
		toSerialize["logo"] = o.Logo
	}
	return toSerialize, nil
}

type NullableBusinessDetails struct {
	value *BusinessDetails
	isSet bool
}

func (v NullableBusinessDetails) Get() *BusinessDetails {
	return v.value
}

func (v *NullableBusinessDetails) Set(val *BusinessDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableBusinessDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableBusinessDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBusinessDetails(val *BusinessDetails) *NullableBusinessDetails {
	return &NullableBusinessDetails{value: val, isSet: true}
}

func (v NullableBusinessDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBusinessDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


