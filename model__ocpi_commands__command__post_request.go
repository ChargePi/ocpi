/*
OCPI commands module

Specification for OCPIs commands handlers

API version: 2.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package OCPI

import (
	"encoding/json"
	"fmt"
)

// OcpiCommandsCommandPostRequest - struct for OcpiCommandsCommandPostRequest
type OcpiCommandsCommandPostRequest struct {
	CancelReservation *CancelReservation
	ReserveNow *ReserveNow
	StartSession *StartSession
	StopSession *StopSession
	UnlockConnector *UnlockConnector
}

// CancelReservationAsOcpiCommandsCommandPostRequest is a convenience function that returns CancelReservation wrapped in OcpiCommandsCommandPostRequest
func CancelReservationAsOcpiCommandsCommandPostRequest(v *CancelReservation) OcpiCommandsCommandPostRequest {
	return OcpiCommandsCommandPostRequest{
		CancelReservation: v,
	}
}

// ReserveNowAsOcpiCommandsCommandPostRequest is a convenience function that returns ReserveNow wrapped in OcpiCommandsCommandPostRequest
func ReserveNowAsOcpiCommandsCommandPostRequest(v *ReserveNow) OcpiCommandsCommandPostRequest {
	return OcpiCommandsCommandPostRequest{
		ReserveNow: v,
	}
}

// StartSessionAsOcpiCommandsCommandPostRequest is a convenience function that returns StartSession wrapped in OcpiCommandsCommandPostRequest
func StartSessionAsOcpiCommandsCommandPostRequest(v *StartSession) OcpiCommandsCommandPostRequest {
	return OcpiCommandsCommandPostRequest{
		StartSession: v,
	}
}

// StopSessionAsOcpiCommandsCommandPostRequest is a convenience function that returns StopSession wrapped in OcpiCommandsCommandPostRequest
func StopSessionAsOcpiCommandsCommandPostRequest(v *StopSession) OcpiCommandsCommandPostRequest {
	return OcpiCommandsCommandPostRequest{
		StopSession: v,
	}
}

// UnlockConnectorAsOcpiCommandsCommandPostRequest is a convenience function that returns UnlockConnector wrapped in OcpiCommandsCommandPostRequest
func UnlockConnectorAsOcpiCommandsCommandPostRequest(v *UnlockConnector) OcpiCommandsCommandPostRequest {
	return OcpiCommandsCommandPostRequest{
		UnlockConnector: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *OcpiCommandsCommandPostRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CancelReservation
	err = newStrictDecoder(data).Decode(&dst.CancelReservation)
	if err == nil {
		jsonCancelReservation, _ := json.Marshal(dst.CancelReservation)
		if string(jsonCancelReservation) == "{}" { // empty struct
			dst.CancelReservation = nil
		} else {
			match++
		}
	} else {
		dst.CancelReservation = nil
	}

	// try to unmarshal data into ReserveNow
	err = newStrictDecoder(data).Decode(&dst.ReserveNow)
	if err == nil {
		jsonReserveNow, _ := json.Marshal(dst.ReserveNow)
		if string(jsonReserveNow) == "{}" { // empty struct
			dst.ReserveNow = nil
		} else {
			match++
		}
	} else {
		dst.ReserveNow = nil
	}

	// try to unmarshal data into StartSession
	err = newStrictDecoder(data).Decode(&dst.StartSession)
	if err == nil {
		jsonStartSession, _ := json.Marshal(dst.StartSession)
		if string(jsonStartSession) == "{}" { // empty struct
			dst.StartSession = nil
		} else {
			match++
		}
	} else {
		dst.StartSession = nil
	}

	// try to unmarshal data into StopSession
	err = newStrictDecoder(data).Decode(&dst.StopSession)
	if err == nil {
		jsonStopSession, _ := json.Marshal(dst.StopSession)
		if string(jsonStopSession) == "{}" { // empty struct
			dst.StopSession = nil
		} else {
			match++
		}
	} else {
		dst.StopSession = nil
	}

	// try to unmarshal data into UnlockConnector
	err = newStrictDecoder(data).Decode(&dst.UnlockConnector)
	if err == nil {
		jsonUnlockConnector, _ := json.Marshal(dst.UnlockConnector)
		if string(jsonUnlockConnector) == "{}" { // empty struct
			dst.UnlockConnector = nil
		} else {
			match++
		}
	} else {
		dst.UnlockConnector = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CancelReservation = nil
		dst.ReserveNow = nil
		dst.StartSession = nil
		dst.StopSession = nil
		dst.UnlockConnector = nil

		return fmt.Errorf("data matches more than one schema in oneOf(OcpiCommandsCommandPostRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(OcpiCommandsCommandPostRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src OcpiCommandsCommandPostRequest) MarshalJSON() ([]byte, error) {
	if src.CancelReservation != nil {
		return json.Marshal(&src.CancelReservation)
	}

	if src.ReserveNow != nil {
		return json.Marshal(&src.ReserveNow)
	}

	if src.StartSession != nil {
		return json.Marshal(&src.StartSession)
	}

	if src.StopSession != nil {
		return json.Marshal(&src.StopSession)
	}

	if src.UnlockConnector != nil {
		return json.Marshal(&src.UnlockConnector)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *OcpiCommandsCommandPostRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CancelReservation != nil {
		return obj.CancelReservation
	}

	if obj.ReserveNow != nil {
		return obj.ReserveNow
	}

	if obj.StartSession != nil {
		return obj.StartSession
	}

	if obj.StopSession != nil {
		return obj.StopSession
	}

	if obj.UnlockConnector != nil {
		return obj.UnlockConnector
	}

	// all schemas are nil
	return nil
}

type NullableOcpiCommandsCommandPostRequest struct {
	value *OcpiCommandsCommandPostRequest
	isSet bool
}

func (v NullableOcpiCommandsCommandPostRequest) Get() *OcpiCommandsCommandPostRequest {
	return v.value
}

func (v *NullableOcpiCommandsCommandPostRequest) Set(val *OcpiCommandsCommandPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOcpiCommandsCommandPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOcpiCommandsCommandPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOcpiCommandsCommandPostRequest(val *OcpiCommandsCommandPostRequest) *NullableOcpiCommandsCommandPostRequest {
	return &NullableOcpiCommandsCommandPostRequest{value: val, isSet: true}
}

func (v NullableOcpiCommandsCommandPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOcpiCommandsCommandPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


