/*
OCPI commands module

Specification for OCPIs commands handlers

API version: 2.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package OCPI

import (
	"encoding/json"
)

// checks if the StartSession type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StartSession{}

// StartSession struct for StartSession
type StartSession struct {
	ResponseUrl string `json:"response_url"`
	Token Token `json:"token"`
	LocationId string `json:"location_id"`
	EvseUid *string `json:"evse_uid,omitempty"`
	ConnectorId *string `json:"connector_id,omitempty"`
	AuthorizationReference *string `json:"authorization_reference,omitempty"`
}

// NewStartSession instantiates a new StartSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStartSession(responseUrl string, token Token, locationId string) *StartSession {
	this := StartSession{}
	this.ResponseUrl = responseUrl
	this.Token = token
	this.LocationId = locationId
	return &this
}

// NewStartSessionWithDefaults instantiates a new StartSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStartSessionWithDefaults() *StartSession {
	this := StartSession{}
	return &this
}

// GetResponseUrl returns the ResponseUrl field value
func (o *StartSession) GetResponseUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResponseUrl
}

// GetResponseUrlOk returns a tuple with the ResponseUrl field value
// and a boolean to check if the value has been set.
func (o *StartSession) GetResponseUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResponseUrl, true
}

// SetResponseUrl sets field value
func (o *StartSession) SetResponseUrl(v string) {
	o.ResponseUrl = v
}

// GetToken returns the Token field value
func (o *StartSession) GetToken() Token {
	if o == nil {
		var ret Token
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *StartSession) GetTokenOk() (*Token, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *StartSession) SetToken(v Token) {
	o.Token = v
}

// GetLocationId returns the LocationId field value
func (o *StartSession) GetLocationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LocationId
}

// GetLocationIdOk returns a tuple with the LocationId field value
// and a boolean to check if the value has been set.
func (o *StartSession) GetLocationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocationId, true
}

// SetLocationId sets field value
func (o *StartSession) SetLocationId(v string) {
	o.LocationId = v
}

// GetEvseUid returns the EvseUid field value if set, zero value otherwise.
func (o *StartSession) GetEvseUid() string {
	if o == nil || IsNil(o.EvseUid) {
		var ret string
		return ret
	}
	return *o.EvseUid
}

// GetEvseUidOk returns a tuple with the EvseUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartSession) GetEvseUidOk() (*string, bool) {
	if o == nil || IsNil(o.EvseUid) {
		return nil, false
	}
	return o.EvseUid, true
}

// HasEvseUid returns a boolean if a field has been set.
func (o *StartSession) HasEvseUid() bool {
	if o != nil && !IsNil(o.EvseUid) {
		return true
	}

	return false
}

// SetEvseUid gets a reference to the given string and assigns it to the EvseUid field.
func (o *StartSession) SetEvseUid(v string) {
	o.EvseUid = &v
}

// GetConnectorId returns the ConnectorId field value if set, zero value otherwise.
func (o *StartSession) GetConnectorId() string {
	if o == nil || IsNil(o.ConnectorId) {
		var ret string
		return ret
	}
	return *o.ConnectorId
}

// GetConnectorIdOk returns a tuple with the ConnectorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartSession) GetConnectorIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectorId) {
		return nil, false
	}
	return o.ConnectorId, true
}

// HasConnectorId returns a boolean if a field has been set.
func (o *StartSession) HasConnectorId() bool {
	if o != nil && !IsNil(o.ConnectorId) {
		return true
	}

	return false
}

// SetConnectorId gets a reference to the given string and assigns it to the ConnectorId field.
func (o *StartSession) SetConnectorId(v string) {
	o.ConnectorId = &v
}

// GetAuthorizationReference returns the AuthorizationReference field value if set, zero value otherwise.
func (o *StartSession) GetAuthorizationReference() string {
	if o == nil || IsNil(o.AuthorizationReference) {
		var ret string
		return ret
	}
	return *o.AuthorizationReference
}

// GetAuthorizationReferenceOk returns a tuple with the AuthorizationReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartSession) GetAuthorizationReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.AuthorizationReference) {
		return nil, false
	}
	return o.AuthorizationReference, true
}

// HasAuthorizationReference returns a boolean if a field has been set.
func (o *StartSession) HasAuthorizationReference() bool {
	if o != nil && !IsNil(o.AuthorizationReference) {
		return true
	}

	return false
}

// SetAuthorizationReference gets a reference to the given string and assigns it to the AuthorizationReference field.
func (o *StartSession) SetAuthorizationReference(v string) {
	o.AuthorizationReference = &v
}

func (o StartSession) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StartSession) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["response_url"] = o.ResponseUrl
	toSerialize["token"] = o.Token
	toSerialize["location_id"] = o.LocationId
	if !IsNil(o.EvseUid) {
		toSerialize["evse_uid"] = o.EvseUid
	}
	if !IsNil(o.ConnectorId) {
		toSerialize["connector_id"] = o.ConnectorId
	}
	if !IsNil(o.AuthorizationReference) {
		toSerialize["authorization_reference"] = o.AuthorizationReference
	}
	return toSerialize, nil
}

type NullableStartSession struct {
	value *StartSession
	isSet bool
}

func (v NullableStartSession) Get() *StartSession {
	return v.value
}

func (v *NullableStartSession) Set(val *StartSession) {
	v.value = val
	v.isSet = true
}

func (v NullableStartSession) IsSet() bool {
	return v.isSet
}

func (v *NullableStartSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStartSession(val *StartSession) *NullableStartSession {
	return &NullableStartSession{value: val, isSet: true}
}

func (v NullableStartSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStartSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


