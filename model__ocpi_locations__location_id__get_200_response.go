/*
OCPI locations module

Specification for OCPIs locations handlers

API version: 2.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package OCPI

import (
	"encoding/json"
	"fmt"
)

// OcpiLocationsLocationIdGet200Response - struct for OcpiLocationsLocationIdGet200Response
type OcpiLocationsLocationIdGet200Response struct {
	Connector *Connector
	Evse *Evse
	Locations *Locations
}

// ConnectorAsOcpiLocationsLocationIdGet200Response is a convenience function that returns Connector wrapped in OcpiLocationsLocationIdGet200Response
func ConnectorAsOcpiLocationsLocationIdGet200Response(v *Connector) OcpiLocationsLocationIdGet200Response {
	return OcpiLocationsLocationIdGet200Response{
		Connector: v,
	}
}

// EvseAsOcpiLocationsLocationIdGet200Response is a convenience function that returns Evse wrapped in OcpiLocationsLocationIdGet200Response
func EvseAsOcpiLocationsLocationIdGet200Response(v *Evse) OcpiLocationsLocationIdGet200Response {
	return OcpiLocationsLocationIdGet200Response{
		Evse: v,
	}
}

// LocationsAsOcpiLocationsLocationIdGet200Response is a convenience function that returns Locations wrapped in OcpiLocationsLocationIdGet200Response
func LocationsAsOcpiLocationsLocationIdGet200Response(v *Locations) OcpiLocationsLocationIdGet200Response {
	return OcpiLocationsLocationIdGet200Response{
		Locations: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *OcpiLocationsLocationIdGet200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Connector
	err = newStrictDecoder(data).Decode(&dst.Connector)
	if err == nil {
		jsonConnector, _ := json.Marshal(dst.Connector)
		if string(jsonConnector) == "{}" { // empty struct
			dst.Connector = nil
		} else {
			match++
		}
	} else {
		dst.Connector = nil
	}

	// try to unmarshal data into Evse
	err = newStrictDecoder(data).Decode(&dst.Evse)
	if err == nil {
		jsonEvse, _ := json.Marshal(dst.Evse)
		if string(jsonEvse) == "{}" { // empty struct
			dst.Evse = nil
		} else {
			match++
		}
	} else {
		dst.Evse = nil
	}

	// try to unmarshal data into Locations
	err = newStrictDecoder(data).Decode(&dst.Locations)
	if err == nil {
		jsonLocations, _ := json.Marshal(dst.Locations)
		if string(jsonLocations) == "{}" { // empty struct
			dst.Locations = nil
		} else {
			match++
		}
	} else {
		dst.Locations = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Connector = nil
		dst.Evse = nil
		dst.Locations = nil

		return fmt.Errorf("data matches more than one schema in oneOf(OcpiLocationsLocationIdGet200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(OcpiLocationsLocationIdGet200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src OcpiLocationsLocationIdGet200Response) MarshalJSON() ([]byte, error) {
	if src.Connector != nil {
		return json.Marshal(&src.Connector)
	}

	if src.Evse != nil {
		return json.Marshal(&src.Evse)
	}

	if src.Locations != nil {
		return json.Marshal(&src.Locations)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *OcpiLocationsLocationIdGet200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Connector != nil {
		return obj.Connector
	}

	if obj.Evse != nil {
		return obj.Evse
	}

	if obj.Locations != nil {
		return obj.Locations
	}

	// all schemas are nil
	return nil
}

type NullableOcpiLocationsLocationIdGet200Response struct {
	value *OcpiLocationsLocationIdGet200Response
	isSet bool
}

func (v NullableOcpiLocationsLocationIdGet200Response) Get() *OcpiLocationsLocationIdGet200Response {
	return v.value
}

func (v *NullableOcpiLocationsLocationIdGet200Response) Set(val *OcpiLocationsLocationIdGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableOcpiLocationsLocationIdGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableOcpiLocationsLocationIdGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOcpiLocationsLocationIdGet200Response(val *OcpiLocationsLocationIdGet200Response) *NullableOcpiLocationsLocationIdGet200Response {
	return &NullableOcpiLocationsLocationIdGet200Response{value: val, isSet: true}
}

func (v NullableOcpiLocationsLocationIdGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOcpiLocationsLocationIdGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


