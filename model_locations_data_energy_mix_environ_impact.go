/*
OCPI locations module

Specification for OCPIs locations handlers

API version: 2.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package OCPI

import (
	"encoding/json"
)

// checks if the LocationsDataEnergyMixEnvironImpact type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocationsDataEnergyMixEnvironImpact{}

// LocationsDataEnergyMixEnvironImpact struct for LocationsDataEnergyMixEnvironImpact
type LocationsDataEnergyMixEnvironImpact struct {
	Category string `json:"category"`
	Amount float32 `json:"amount"`
}

// NewLocationsDataEnergyMixEnvironImpact instantiates a new LocationsDataEnergyMixEnvironImpact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationsDataEnergyMixEnvironImpact(category string, amount float32) *LocationsDataEnergyMixEnvironImpact {
	this := LocationsDataEnergyMixEnvironImpact{}
	this.Category = category
	this.Amount = amount
	return &this
}

// NewLocationsDataEnergyMixEnvironImpactWithDefaults instantiates a new LocationsDataEnergyMixEnvironImpact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationsDataEnergyMixEnvironImpactWithDefaults() *LocationsDataEnergyMixEnvironImpact {
	this := LocationsDataEnergyMixEnvironImpact{}
	return &this
}

// GetCategory returns the Category field value
func (o *LocationsDataEnergyMixEnvironImpact) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *LocationsDataEnergyMixEnvironImpact) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *LocationsDataEnergyMixEnvironImpact) SetCategory(v string) {
	o.Category = v
}

// GetAmount returns the Amount field value
func (o *LocationsDataEnergyMixEnvironImpact) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *LocationsDataEnergyMixEnvironImpact) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *LocationsDataEnergyMixEnvironImpact) SetAmount(v float32) {
	o.Amount = v
}

func (o LocationsDataEnergyMixEnvironImpact) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocationsDataEnergyMixEnvironImpact) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["category"] = o.Category
	toSerialize["amount"] = o.Amount
	return toSerialize, nil
}

type NullableLocationsDataEnergyMixEnvironImpact struct {
	value *LocationsDataEnergyMixEnvironImpact
	isSet bool
}

func (v NullableLocationsDataEnergyMixEnvironImpact) Get() *LocationsDataEnergyMixEnvironImpact {
	return v.value
}

func (v *NullableLocationsDataEnergyMixEnvironImpact) Set(val *LocationsDataEnergyMixEnvironImpact) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationsDataEnergyMixEnvironImpact) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationsDataEnergyMixEnvironImpact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationsDataEnergyMixEnvironImpact(val *LocationsDataEnergyMixEnvironImpact) *NullableLocationsDataEnergyMixEnvironImpact {
	return &NullableLocationsDataEnergyMixEnvironImpact{value: val, isSet: true}
}

func (v NullableLocationsDataEnergyMixEnvironImpact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationsDataEnergyMixEnvironImpact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


