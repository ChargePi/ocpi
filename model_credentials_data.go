/*
OCPI modules

Specification for OCPIs modules handlers

API version: 2.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package OCPI

import (
	"encoding/json"
)

// checks if the CredentialsData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CredentialsData{}

// CredentialsData struct for CredentialsData
type CredentialsData struct {
	Token string `json:"token"`
	Url string `json:"url"`
	Roles *CredentialsDataRoles `json:"roles,omitempty"`
}

// NewCredentialsData instantiates a new CredentialsData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCredentialsData(token string, url string) *CredentialsData {
	this := CredentialsData{}
	this.Token = token
	this.Url = url
	return &this
}

// NewCredentialsDataWithDefaults instantiates a new CredentialsData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCredentialsDataWithDefaults() *CredentialsData {
	this := CredentialsData{}
	return &this
}

// GetToken returns the Token field value
func (o *CredentialsData) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *CredentialsData) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *CredentialsData) SetToken(v string) {
	o.Token = v
}

// GetUrl returns the Url field value
func (o *CredentialsData) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CredentialsData) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CredentialsData) SetUrl(v string) {
	o.Url = v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *CredentialsData) GetRoles() CredentialsDataRoles {
	if o == nil || IsNil(o.Roles) {
		var ret CredentialsDataRoles
		return ret
	}
	return *o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialsData) GetRolesOk() (*CredentialsDataRoles, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *CredentialsData) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given CredentialsDataRoles and assigns it to the Roles field.
func (o *CredentialsData) SetRoles(v CredentialsDataRoles) {
	o.Roles = &v
}

func (o CredentialsData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CredentialsData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["token"] = o.Token
	toSerialize["url"] = o.Url
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	return toSerialize, nil
}

type NullableCredentialsData struct {
	value *CredentialsData
	isSet bool
}

func (v NullableCredentialsData) Get() *CredentialsData {
	return v.value
}

func (v *NullableCredentialsData) Set(val *CredentialsData) {
	v.value = val
	v.isSet = true
}

func (v NullableCredentialsData) IsSet() bool {
	return v.isSet
}

func (v *NullableCredentialsData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCredentialsData(val *CredentialsData) *NullableCredentialsData {
	return &NullableCredentialsData{value: val, isSet: true}
}

func (v NullableCredentialsData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCredentialsData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


