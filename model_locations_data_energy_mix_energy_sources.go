/*
OCPI locations module

Specification for OCPIs locations handlers

API version: 2.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package OCPI

import (
	"encoding/json"
)

// checks if the LocationsDataEnergyMixEnergySources type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocationsDataEnergyMixEnergySources{}

// LocationsDataEnergyMixEnergySources struct for LocationsDataEnergyMixEnergySources
type LocationsDataEnergyMixEnergySources struct {
	Source string `json:"source"`
	Percentage float32 `json:"percentage"`
}

// NewLocationsDataEnergyMixEnergySources instantiates a new LocationsDataEnergyMixEnergySources object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationsDataEnergyMixEnergySources(source string, percentage float32) *LocationsDataEnergyMixEnergySources {
	this := LocationsDataEnergyMixEnergySources{}
	this.Source = source
	this.Percentage = percentage
	return &this
}

// NewLocationsDataEnergyMixEnergySourcesWithDefaults instantiates a new LocationsDataEnergyMixEnergySources object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationsDataEnergyMixEnergySourcesWithDefaults() *LocationsDataEnergyMixEnergySources {
	this := LocationsDataEnergyMixEnergySources{}
	return &this
}

// GetSource returns the Source field value
func (o *LocationsDataEnergyMixEnergySources) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *LocationsDataEnergyMixEnergySources) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *LocationsDataEnergyMixEnergySources) SetSource(v string) {
	o.Source = v
}

// GetPercentage returns the Percentage field value
func (o *LocationsDataEnergyMixEnergySources) GetPercentage() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Percentage
}

// GetPercentageOk returns a tuple with the Percentage field value
// and a boolean to check if the value has been set.
func (o *LocationsDataEnergyMixEnergySources) GetPercentageOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Percentage, true
}

// SetPercentage sets field value
func (o *LocationsDataEnergyMixEnergySources) SetPercentage(v float32) {
	o.Percentage = v
}

func (o LocationsDataEnergyMixEnergySources) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocationsDataEnergyMixEnergySources) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source"] = o.Source
	toSerialize["percentage"] = o.Percentage
	return toSerialize, nil
}

type NullableLocationsDataEnergyMixEnergySources struct {
	value *LocationsDataEnergyMixEnergySources
	isSet bool
}

func (v NullableLocationsDataEnergyMixEnergySources) Get() *LocationsDataEnergyMixEnergySources {
	return v.value
}

func (v *NullableLocationsDataEnergyMixEnergySources) Set(val *LocationsDataEnergyMixEnergySources) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationsDataEnergyMixEnergySources) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationsDataEnergyMixEnergySources) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationsDataEnergyMixEnergySources(val *LocationsDataEnergyMixEnergySources) *NullableLocationsDataEnergyMixEnergySources {
	return &NullableLocationsDataEnergyMixEnergySources{value: val, isSet: true}
}

func (v NullableLocationsDataEnergyMixEnergySources) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationsDataEnergyMixEnergySources) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


