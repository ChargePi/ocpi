/*
OCPI charging profiles module

Specification for OCPIs charging profiles handlers

API version: 2.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package OCPI

import (
	"encoding/json"
	"fmt"
)

// ChargingProfileResponseType Response to the ChargingProfile request from the eMSP to the CPO.
type ChargingProfileResponseType string

// List of chargingProfileResponseType
const (
	ACCEPTED ChargingProfileResponseType = "ACCEPTED"
	NOT_SUPPORTED ChargingProfileResponseType = "NOT_SUPPORTED"
	REJECTED ChargingProfileResponseType = "REJECTED"
	TOO_OFTEN ChargingProfileResponseType = "TOO_OFTEN"
	UNKNOWN_SESSION ChargingProfileResponseType = "UNKNOWN_SESSION"
)

// All allowed values of ChargingProfileResponseType enum
var AllowedChargingProfileResponseTypeEnumValues = []ChargingProfileResponseType{
	"ACCEPTED",
	"NOT_SUPPORTED",
	"REJECTED",
	"TOO_OFTEN",
	"UNKNOWN_SESSION",
}

func (v *ChargingProfileResponseType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChargingProfileResponseType(value)
	for _, existing := range AllowedChargingProfileResponseTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChargingProfileResponseType", value)
}

// NewChargingProfileResponseTypeFromValue returns a pointer to a valid ChargingProfileResponseType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChargingProfileResponseTypeFromValue(v string) (*ChargingProfileResponseType, error) {
	ev := ChargingProfileResponseType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChargingProfileResponseType: valid values are %v", v, AllowedChargingProfileResponseTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChargingProfileResponseType) IsValid() bool {
	for _, existing := range AllowedChargingProfileResponseTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to chargingProfileResponseType value
func (v ChargingProfileResponseType) Ptr() *ChargingProfileResponseType {
	return &v
}

type NullableChargingProfileResponseType struct {
	value *ChargingProfileResponseType
	isSet bool
}

func (v NullableChargingProfileResponseType) Get() *ChargingProfileResponseType {
	return v.value
}

func (v *NullableChargingProfileResponseType) Set(val *ChargingProfileResponseType) {
	v.value = val
	v.isSet = true
}

func (v NullableChargingProfileResponseType) IsSet() bool {
	return v.isSet
}

func (v *NullableChargingProfileResponseType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChargingProfileResponseType(val *ChargingProfileResponseType) *NullableChargingProfileResponseType {
	return &NullableChargingProfileResponseType{value: val, isSet: true}
}

func (v NullableChargingProfileResponseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChargingProfileResponseType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

