/*
OCPI modules

Specification for OCPIs modules handlers

API version: 2.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package OCPI

import (
	"encoding/json"
	"fmt"
)

// ModuleIDType OCPI 2.2.1 modules
type ModuleIDType string

// List of moduleIDType
const (
	CDRS ModuleIDType = "cdrs"
	CHARGINGPROFILES ModuleIDType = "chargingprofiles"
	COMMANDS ModuleIDType = "commands"
	CREDENTIALS ModuleIDType = "credentials"
	HUBCLIENTINFO ModuleIDType = "hubclientinfo"
	LOCATIONS ModuleIDType = "locations"
	SESSIONS ModuleIDType = "sessions"
	TARIFFS ModuleIDType = "tariffs"
	TOKENS ModuleIDType = "tokens"
)

// All allowed values of ModuleIDType enum
var AllowedModuleIDTypeEnumValues = []ModuleIDType{
	"cdrs",
	"chargingprofiles",
	"commands",
	"credentials",
	"hubclientinfo",
	"locations",
	"sessions",
	"tariffs",
	"tokens",
}

func (v *ModuleIDType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModuleIDType(value)
	for _, existing := range AllowedModuleIDTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModuleIDType", value)
}

// NewModuleIDTypeFromValue returns a pointer to a valid ModuleIDType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModuleIDTypeFromValue(v string) (*ModuleIDType, error) {
	ev := ModuleIDType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModuleIDType: valid values are %v", v, AllowedModuleIDTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModuleIDType) IsValid() bool {
	for _, existing := range AllowedModuleIDTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to moduleIDType value
func (v ModuleIDType) Ptr() *ModuleIDType {
	return &v
}

type NullableModuleIDType struct {
	value *ModuleIDType
	isSet bool
}

func (v NullableModuleIDType) Get() *ModuleIDType {
	return v.value
}

func (v *NullableModuleIDType) Set(val *ModuleIDType) {
	v.value = val
	v.isSet = true
}

func (v NullableModuleIDType) IsSet() bool {
	return v.isSet
}

func (v *NullableModuleIDType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModuleIDType(val *ModuleIDType) *NullableModuleIDType {
	return &NullableModuleIDType{value: val, isSet: true}
}

func (v NullableModuleIDType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModuleIDType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

