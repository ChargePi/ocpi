/*
OCPI modules

Specification for OCPIs modules handlers

API version: 2.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package OCPI

import (
	"encoding/json"
)

// checks if the LocationsDataPublishAllowedTo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocationsDataPublishAllowedTo{}

// LocationsDataPublishAllowedTo struct for LocationsDataPublishAllowedTo
type LocationsDataPublishAllowedTo struct {
	Uid *string `json:"uid,omitempty"`
	Type *string `json:"type,omitempty"`
	VisualNumber *string `json:"visual_number,omitempty"`
	Issuer *string `json:"issuer,omitempty"`
	GroupId *string `json:"group_id,omitempty"`
}

// NewLocationsDataPublishAllowedTo instantiates a new LocationsDataPublishAllowedTo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationsDataPublishAllowedTo() *LocationsDataPublishAllowedTo {
	this := LocationsDataPublishAllowedTo{}
	return &this
}

// NewLocationsDataPublishAllowedToWithDefaults instantiates a new LocationsDataPublishAllowedTo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationsDataPublishAllowedToWithDefaults() *LocationsDataPublishAllowedTo {
	this := LocationsDataPublishAllowedTo{}
	return &this
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *LocationsDataPublishAllowedTo) GetUid() string {
	if o == nil || IsNil(o.Uid) {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationsDataPublishAllowedTo) GetUidOk() (*string, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *LocationsDataPublishAllowedTo) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *LocationsDataPublishAllowedTo) SetUid(v string) {
	o.Uid = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *LocationsDataPublishAllowedTo) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationsDataPublishAllowedTo) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *LocationsDataPublishAllowedTo) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *LocationsDataPublishAllowedTo) SetType(v string) {
	o.Type = &v
}

// GetVisualNumber returns the VisualNumber field value if set, zero value otherwise.
func (o *LocationsDataPublishAllowedTo) GetVisualNumber() string {
	if o == nil || IsNil(o.VisualNumber) {
		var ret string
		return ret
	}
	return *o.VisualNumber
}

// GetVisualNumberOk returns a tuple with the VisualNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationsDataPublishAllowedTo) GetVisualNumberOk() (*string, bool) {
	if o == nil || IsNil(o.VisualNumber) {
		return nil, false
	}
	return o.VisualNumber, true
}

// HasVisualNumber returns a boolean if a field has been set.
func (o *LocationsDataPublishAllowedTo) HasVisualNumber() bool {
	if o != nil && !IsNil(o.VisualNumber) {
		return true
	}

	return false
}

// SetVisualNumber gets a reference to the given string and assigns it to the VisualNumber field.
func (o *LocationsDataPublishAllowedTo) SetVisualNumber(v string) {
	o.VisualNumber = &v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *LocationsDataPublishAllowedTo) GetIssuer() string {
	if o == nil || IsNil(o.Issuer) {
		var ret string
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationsDataPublishAllowedTo) GetIssuerOk() (*string, bool) {
	if o == nil || IsNil(o.Issuer) {
		return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *LocationsDataPublishAllowedTo) HasIssuer() bool {
	if o != nil && !IsNil(o.Issuer) {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given string and assigns it to the Issuer field.
func (o *LocationsDataPublishAllowedTo) SetIssuer(v string) {
	o.Issuer = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *LocationsDataPublishAllowedTo) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationsDataPublishAllowedTo) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *LocationsDataPublishAllowedTo) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *LocationsDataPublishAllowedTo) SetGroupId(v string) {
	o.GroupId = &v
}

func (o LocationsDataPublishAllowedTo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocationsDataPublishAllowedTo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.VisualNumber) {
		toSerialize["visual_number"] = o.VisualNumber
	}
	if !IsNil(o.Issuer) {
		toSerialize["issuer"] = o.Issuer
	}
	if !IsNil(o.GroupId) {
		toSerialize["group_id"] = o.GroupId
	}
	return toSerialize, nil
}

type NullableLocationsDataPublishAllowedTo struct {
	value *LocationsDataPublishAllowedTo
	isSet bool
}

func (v NullableLocationsDataPublishAllowedTo) Get() *LocationsDataPublishAllowedTo {
	return v.value
}

func (v *NullableLocationsDataPublishAllowedTo) Set(val *LocationsDataPublishAllowedTo) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationsDataPublishAllowedTo) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationsDataPublishAllowedTo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationsDataPublishAllowedTo(val *LocationsDataPublishAllowedTo) *NullableLocationsDataPublishAllowedTo {
	return &NullableLocationsDataPublishAllowedTo{value: val, isSet: true}
}

func (v NullableLocationsDataPublishAllowedTo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationsDataPublishAllowedTo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


