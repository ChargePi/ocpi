---
openapi: "3.0.3"
info:
  version: 2.2.1
  title: OCPI tokens module
  description: Specification for OCPIs tokens handlers
paths:
  /ocpi/tokens:
    get:
      description: "Fetch information about Tokens known in the eMSP systems."
      parameters:
        - in: query
          name: date_from
          schema:
            type: string
          description: "Return tokens that have last_updated after or equal to this Date/Time (inclusive)."
        - in: query
          name: date_to
          schema:
            type: string
          description: "Return tokens that have last_updated up to Date/Time, but not including (exclusive)."
        - in: query
          name: offset
          schema:
            type: integer
          description: "The offset of the first object returned. Default is 0."
        - in: query
          name: limit
          schema:
            type: integer
          description: "Maximum number of objects to GET."
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tokensResponse'
          description: tokensResponse
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Get tokens
  /ocpi/{token_uid}/authorize:
    post:
      description: "Do a 'real-time' authorization request to the eMSP system, \
      \ validating if a Token might be used (at the optionally given Location)."
      parameters:
        - in: path
          name: token_uid
          schema:
            type: string
          required: true
          description: "Token.uid of the Token for which authorization is requested."
        - in: path
          name: type
          schema:
            type: string
          description: "Token.type of the Token for which this authorization is. Default if omitted: RFID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/locationReferences'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authorizationInfo'
          description: authorizationInfo
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Authorization
  /ocpi/tokens/{country_code}/{party_id}/{token_uid}:
    get:
      description: "If the eMSP wants to check the status of a Token in the \
      \ CPO system it might GET the object from the CPO system for validation \
      \ purposes. The eMSP is the owner of the objects, so it would be illogical \
      \ if the CPO system had a different status or was missing an object."
      parameters:
        - in: path
          name: country_code
          schema:
            type: string
          required: true
          description: "Country code of the eMSP requesting this GET from the CPO system."
        - in: path
          name: party_id
          schema:
            type: string
          required: true
          description: "Party ID (Provider ID) of the eMSP requesting this GET from the CPO system."
        - in: path
          name: token_uid
          schema:
            type: string
          required: true
          description: "Token.uid of the Token object to retrieve."
        - in: path
          name: type
          schema:
            type: string
          description: "Token.type of the Token to retrieve. Default if omitted: RFID"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tokenResponse'
          description: tokenResponse
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Get the token object
    put:
      description: "New or updated Token objects are pushed from the eMSP to the CPO."
      parameters:
        - in: path
          name: country_code
          schema:
            type: string
          required: true
          description: "Country code of the eMSP sending this PUT request to the CPO system. \
          \ This SHALL be the same value as the country_code in the Token object being pushed."
        - in: path
          name: party_id
          schema:
            type: string
          required: true
          description: "Party ID (Provider ID) of the eMSP sending this PUT request to the CPO \
          \ system. This SHALL be the same value as the party_id in the Token object being pushed."
        - in: path
          name: token_uid
          schema:
            type: string
          required: true
          description: "s Token.uid of the (new) Token object (to replace)."
        - in: path
          name: type
          schema:
            type: string
          description: "Token.type of the Token of the (new) Token object (to replace). \
          \ Default if omitted: RFID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/token'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tokenResponse'
          description: tokenResponse
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Update token object
    patch:
      description: "Same as the PUT method, but only the fields/objects \
      \ that have to be updated have to be present, other fields/objects \
      \ that are not specified are considered unchanged. Any request to the \
      \ PATCH method SHALL contain the last_updated field."
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tokenResponse'
          description: tokenResponse
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/genericError'
          description: genericError
      summary: Update token object
components:
  schemas:
    tokensResponse:
      type: object
      properties:
        tokens:
          $ref: '#/components/schemas/token'
        status_code:
            type: number
            example: 1000
        status_message:
          type: string
          example: "Success"
        timeStamp:
          type: string
          example: "2015-06-30T21:59:59Z"
      required:
        - status_code
        - timestamp
    tokenResponse:
      type: object
      properties:
        token:
          $ref: '#/components/schemas/token'
        status_code:
          type: number
          example: 1000
        status_message:
          type: string
          example: "Success"
        timeStamp:
          type: string
          example: "2015-06-30T21:59:59Z"
      required:
        - token
        - status_code
        - timestamp
    token:
      type: object
      properties:
        country_code:
          type: string
          example: "DE"
        party_id:
          type: string
          example: "TNM"
        uid:
          type: string
          example: "bdf21bce-fc97-11e8-8eb2-f2801f1b9fd1"
        type:
          type: string
          enum: ["AD_HOC_USER", "APP_USER", "OTHER", "RFID"]
        contract_id:
          type: string
          example: "DE8ACC12E46L89"
        visual_number:
          type: string
          example: "DF000-2001-8999-1"
        issuer:
          type: string
          example: "TheNewMotion"
        group_id:
          type: string
          example: "DF000-2001-8999"
        valid:
          type: boolean
          example: true
        whitelist:
          type: string
          enum: ["ALWAYS", "ALLOWED", "ALLOWED_OFFLINE", "NEVER"]
        language:
          type: string
          example: "en"
        default_profile_type:
          type: string
          enum: ["CHEAP", "FAST", "GREEN", "REGULAR"]
        energy_contract:
          type: object
          properties:
            supplier_name:
              type: string
              example: "Greenpeace Energy eG"
            contract_id:
              type: string
              example: "0123456789"
          required:
            - supplier_name
        last_updated:
          type: string
          example: "2018-12-10T17:25:10Z"
      required:
        - country_code
        - party_id
        - uid
        - type
        - contract_id
        - issuer
        - valid
        - whitelist
        - last_updated
    locationReferences:
      type: object
      properties:
        location_id:
          type: string
          example: "LOC1"
        evse_uids:
          type: string
      required:
        - location_id
    authorizationInfo:
      type: object
      properties:
        allowed:
          type: string
          enum: ["ALLOWED", "BLOCKED", "EXPIRED", "NO_CREDIT", "NOT_ALLOWED"]
        token:
          $ref: '#/components/schemas/token'
        location:
          $ref: '#/components/schemas/locationReferences'
        authorization_reference:
          type: string
          example: "567890"
        info: 
          type: object
          properties:
            language:
              type: string
              example: "en"
            text:
              type: string
          required:
            - language
            - text
      required:
        - allowed
        - token
    genericError:
      type: object
      properties:
        status_code:
          type: number
          example: 2001
        status_message:
          type: string
          example: "Missing required field: type"
        timeStamp:
          type: string
          example: "2015-06-30T21:59:59Z"
      required:
        - status_code
        - timeStamp