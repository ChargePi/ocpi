/*
OCPI modules

Specification for OCPIs modules handlers

API version: 2.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package OCPI

import (
	"encoding/json"
)

// checks if the Evse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Evse{}

// Evse struct for Evse
type Evse struct {
	Uid string `json:"uid"`
	EvseId *string `json:"evse_id,omitempty"`
	Status string `json:"status"`
	StatusSchedule *EvseStatusSchedule `json:"status_schedule,omitempty"`
	Capabilities *string `json:"capabilities,omitempty"`
	Connectors *Connector `json:"connectors,omitempty"`
	FloorLevel *string `json:"floor_level,omitempty"`
	Coordinates *CdrCdrLocationCoordinates `json:"coordinates,omitempty"`
	PhysicalReference *string `json:"physical_reference,omitempty"`
	Directions *CdrTariffsTariffAltText `json:"directions,omitempty"`
	ParkingRestrictions *string `json:"parking_restrictions,omitempty"`
	Images *Image `json:"images,omitempty"`
	LastUpdated string `json:"last_updated"`
}

// NewEvse instantiates a new Evse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvse(uid string, status string, lastUpdated string) *Evse {
	this := Evse{}
	this.Uid = uid
	this.Status = status
	this.LastUpdated = lastUpdated
	return &this
}

// NewEvseWithDefaults instantiates a new Evse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEvseWithDefaults() *Evse {
	this := Evse{}
	return &this
}

// GetUid returns the Uid field value
func (o *Evse) GetUid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uid
}

// GetUidOk returns a tuple with the Uid field value
// and a boolean to check if the value has been set.
func (o *Evse) GetUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uid, true
}

// SetUid sets field value
func (o *Evse) SetUid(v string) {
	o.Uid = v
}

// GetEvseId returns the EvseId field value if set, zero value otherwise.
func (o *Evse) GetEvseId() string {
	if o == nil || IsNil(o.EvseId) {
		var ret string
		return ret
	}
	return *o.EvseId
}

// GetEvseIdOk returns a tuple with the EvseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evse) GetEvseIdOk() (*string, bool) {
	if o == nil || IsNil(o.EvseId) {
		return nil, false
	}
	return o.EvseId, true
}

// HasEvseId returns a boolean if a field has been set.
func (o *Evse) HasEvseId() bool {
	if o != nil && !IsNil(o.EvseId) {
		return true
	}

	return false
}

// SetEvseId gets a reference to the given string and assigns it to the EvseId field.
func (o *Evse) SetEvseId(v string) {
	o.EvseId = &v
}

// GetStatus returns the Status field value
func (o *Evse) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Evse) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Evse) SetStatus(v string) {
	o.Status = v
}

// GetStatusSchedule returns the StatusSchedule field value if set, zero value otherwise.
func (o *Evse) GetStatusSchedule() EvseStatusSchedule {
	if o == nil || IsNil(o.StatusSchedule) {
		var ret EvseStatusSchedule
		return ret
	}
	return *o.StatusSchedule
}

// GetStatusScheduleOk returns a tuple with the StatusSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evse) GetStatusScheduleOk() (*EvseStatusSchedule, bool) {
	if o == nil || IsNil(o.StatusSchedule) {
		return nil, false
	}
	return o.StatusSchedule, true
}

// HasStatusSchedule returns a boolean if a field has been set.
func (o *Evse) HasStatusSchedule() bool {
	if o != nil && !IsNil(o.StatusSchedule) {
		return true
	}

	return false
}

// SetStatusSchedule gets a reference to the given EvseStatusSchedule and assigns it to the StatusSchedule field.
func (o *Evse) SetStatusSchedule(v EvseStatusSchedule) {
	o.StatusSchedule = &v
}

// GetCapabilities returns the Capabilities field value if set, zero value otherwise.
func (o *Evse) GetCapabilities() string {
	if o == nil || IsNil(o.Capabilities) {
		var ret string
		return ret
	}
	return *o.Capabilities
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evse) GetCapabilitiesOk() (*string, bool) {
	if o == nil || IsNil(o.Capabilities) {
		return nil, false
	}
	return o.Capabilities, true
}

// HasCapabilities returns a boolean if a field has been set.
func (o *Evse) HasCapabilities() bool {
	if o != nil && !IsNil(o.Capabilities) {
		return true
	}

	return false
}

// SetCapabilities gets a reference to the given string and assigns it to the Capabilities field.
func (o *Evse) SetCapabilities(v string) {
	o.Capabilities = &v
}

// GetConnectors returns the Connectors field value if set, zero value otherwise.
func (o *Evse) GetConnectors() Connector {
	if o == nil || IsNil(o.Connectors) {
		var ret Connector
		return ret
	}
	return *o.Connectors
}

// GetConnectorsOk returns a tuple with the Connectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evse) GetConnectorsOk() (*Connector, bool) {
	if o == nil || IsNil(o.Connectors) {
		return nil, false
	}
	return o.Connectors, true
}

// HasConnectors returns a boolean if a field has been set.
func (o *Evse) HasConnectors() bool {
	if o != nil && !IsNil(o.Connectors) {
		return true
	}

	return false
}

// SetConnectors gets a reference to the given Connector and assigns it to the Connectors field.
func (o *Evse) SetConnectors(v Connector) {
	o.Connectors = &v
}

// GetFloorLevel returns the FloorLevel field value if set, zero value otherwise.
func (o *Evse) GetFloorLevel() string {
	if o == nil || IsNil(o.FloorLevel) {
		var ret string
		return ret
	}
	return *o.FloorLevel
}

// GetFloorLevelOk returns a tuple with the FloorLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evse) GetFloorLevelOk() (*string, bool) {
	if o == nil || IsNil(o.FloorLevel) {
		return nil, false
	}
	return o.FloorLevel, true
}

// HasFloorLevel returns a boolean if a field has been set.
func (o *Evse) HasFloorLevel() bool {
	if o != nil && !IsNil(o.FloorLevel) {
		return true
	}

	return false
}

// SetFloorLevel gets a reference to the given string and assigns it to the FloorLevel field.
func (o *Evse) SetFloorLevel(v string) {
	o.FloorLevel = &v
}

// GetCoordinates returns the Coordinates field value if set, zero value otherwise.
func (o *Evse) GetCoordinates() CdrCdrLocationCoordinates {
	if o == nil || IsNil(o.Coordinates) {
		var ret CdrCdrLocationCoordinates
		return ret
	}
	return *o.Coordinates
}

// GetCoordinatesOk returns a tuple with the Coordinates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evse) GetCoordinatesOk() (*CdrCdrLocationCoordinates, bool) {
	if o == nil || IsNil(o.Coordinates) {
		return nil, false
	}
	return o.Coordinates, true
}

// HasCoordinates returns a boolean if a field has been set.
func (o *Evse) HasCoordinates() bool {
	if o != nil && !IsNil(o.Coordinates) {
		return true
	}

	return false
}

// SetCoordinates gets a reference to the given CdrCdrLocationCoordinates and assigns it to the Coordinates field.
func (o *Evse) SetCoordinates(v CdrCdrLocationCoordinates) {
	o.Coordinates = &v
}

// GetPhysicalReference returns the PhysicalReference field value if set, zero value otherwise.
func (o *Evse) GetPhysicalReference() string {
	if o == nil || IsNil(o.PhysicalReference) {
		var ret string
		return ret
	}
	return *o.PhysicalReference
}

// GetPhysicalReferenceOk returns a tuple with the PhysicalReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evse) GetPhysicalReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.PhysicalReference) {
		return nil, false
	}
	return o.PhysicalReference, true
}

// HasPhysicalReference returns a boolean if a field has been set.
func (o *Evse) HasPhysicalReference() bool {
	if o != nil && !IsNil(o.PhysicalReference) {
		return true
	}

	return false
}

// SetPhysicalReference gets a reference to the given string and assigns it to the PhysicalReference field.
func (o *Evse) SetPhysicalReference(v string) {
	o.PhysicalReference = &v
}

// GetDirections returns the Directions field value if set, zero value otherwise.
func (o *Evse) GetDirections() CdrTariffsTariffAltText {
	if o == nil || IsNil(o.Directions) {
		var ret CdrTariffsTariffAltText
		return ret
	}
	return *o.Directions
}

// GetDirectionsOk returns a tuple with the Directions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evse) GetDirectionsOk() (*CdrTariffsTariffAltText, bool) {
	if o == nil || IsNil(o.Directions) {
		return nil, false
	}
	return o.Directions, true
}

// HasDirections returns a boolean if a field has been set.
func (o *Evse) HasDirections() bool {
	if o != nil && !IsNil(o.Directions) {
		return true
	}

	return false
}

// SetDirections gets a reference to the given CdrTariffsTariffAltText and assigns it to the Directions field.
func (o *Evse) SetDirections(v CdrTariffsTariffAltText) {
	o.Directions = &v
}

// GetParkingRestrictions returns the ParkingRestrictions field value if set, zero value otherwise.
func (o *Evse) GetParkingRestrictions() string {
	if o == nil || IsNil(o.ParkingRestrictions) {
		var ret string
		return ret
	}
	return *o.ParkingRestrictions
}

// GetParkingRestrictionsOk returns a tuple with the ParkingRestrictions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evse) GetParkingRestrictionsOk() (*string, bool) {
	if o == nil || IsNil(o.ParkingRestrictions) {
		return nil, false
	}
	return o.ParkingRestrictions, true
}

// HasParkingRestrictions returns a boolean if a field has been set.
func (o *Evse) HasParkingRestrictions() bool {
	if o != nil && !IsNil(o.ParkingRestrictions) {
		return true
	}

	return false
}

// SetParkingRestrictions gets a reference to the given string and assigns it to the ParkingRestrictions field.
func (o *Evse) SetParkingRestrictions(v string) {
	o.ParkingRestrictions = &v
}

// GetImages returns the Images field value if set, zero value otherwise.
func (o *Evse) GetImages() Image {
	if o == nil || IsNil(o.Images) {
		var ret Image
		return ret
	}
	return *o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evse) GetImagesOk() (*Image, bool) {
	if o == nil || IsNil(o.Images) {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *Evse) HasImages() bool {
	if o != nil && !IsNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given Image and assigns it to the Images field.
func (o *Evse) SetImages(v Image) {
	o.Images = &v
}

// GetLastUpdated returns the LastUpdated field value
func (o *Evse) GetLastUpdated() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value
// and a boolean to check if the value has been set.
func (o *Evse) GetLastUpdatedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastUpdated, true
}

// SetLastUpdated sets field value
func (o *Evse) SetLastUpdated(v string) {
	o.LastUpdated = v
}

func (o Evse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Evse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uid"] = o.Uid
	if !IsNil(o.EvseId) {
		toSerialize["evse_id"] = o.EvseId
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.StatusSchedule) {
		toSerialize["status_schedule"] = o.StatusSchedule
	}
	if !IsNil(o.Capabilities) {
		toSerialize["capabilities"] = o.Capabilities
	}
	if !IsNil(o.Connectors) {
		toSerialize["connectors"] = o.Connectors
	}
	if !IsNil(o.FloorLevel) {
		toSerialize["floor_level"] = o.FloorLevel
	}
	if !IsNil(o.Coordinates) {
		toSerialize["coordinates"] = o.Coordinates
	}
	if !IsNil(o.PhysicalReference) {
		toSerialize["physical_reference"] = o.PhysicalReference
	}
	if !IsNil(o.Directions) {
		toSerialize["directions"] = o.Directions
	}
	if !IsNil(o.ParkingRestrictions) {
		toSerialize["parking_restrictions"] = o.ParkingRestrictions
	}
	if !IsNil(o.Images) {
		toSerialize["images"] = o.Images
	}
	toSerialize["last_updated"] = o.LastUpdated
	return toSerialize, nil
}

type NullableEvse struct {
	value *Evse
	isSet bool
}

func (v NullableEvse) Get() *Evse {
	return v.value
}

func (v *NullableEvse) Set(val *Evse) {
	v.value = val
	v.isSet = true
}

func (v NullableEvse) IsSet() bool {
	return v.isSet
}

func (v *NullableEvse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvse(val *Evse) *NullableEvse {
	return &NullableEvse{value: val, isSet: true}
}

func (v NullableEvse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


