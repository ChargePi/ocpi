/*
OCPI tokens module

Specification for OCPIs tokens handlers

API version: 2.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package OCPI

import (
	"encoding/json"
)

// checks if the LocationReferences type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocationReferences{}

// LocationReferences struct for LocationReferences
type LocationReferences struct {
	LocationId string `json:"location_id"`
	EvseUids *string `json:"evse_uids,omitempty"`
}

// NewLocationReferences instantiates a new LocationReferences object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationReferences(locationId string) *LocationReferences {
	this := LocationReferences{}
	this.LocationId = locationId
	return &this
}

// NewLocationReferencesWithDefaults instantiates a new LocationReferences object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationReferencesWithDefaults() *LocationReferences {
	this := LocationReferences{}
	return &this
}

// GetLocationId returns the LocationId field value
func (o *LocationReferences) GetLocationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LocationId
}

// GetLocationIdOk returns a tuple with the LocationId field value
// and a boolean to check if the value has been set.
func (o *LocationReferences) GetLocationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocationId, true
}

// SetLocationId sets field value
func (o *LocationReferences) SetLocationId(v string) {
	o.LocationId = v
}

// GetEvseUids returns the EvseUids field value if set, zero value otherwise.
func (o *LocationReferences) GetEvseUids() string {
	if o == nil || IsNil(o.EvseUids) {
		var ret string
		return ret
	}
	return *o.EvseUids
}

// GetEvseUidsOk returns a tuple with the EvseUids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationReferences) GetEvseUidsOk() (*string, bool) {
	if o == nil || IsNil(o.EvseUids) {
		return nil, false
	}
	return o.EvseUids, true
}

// HasEvseUids returns a boolean if a field has been set.
func (o *LocationReferences) HasEvseUids() bool {
	if o != nil && !IsNil(o.EvseUids) {
		return true
	}

	return false
}

// SetEvseUids gets a reference to the given string and assigns it to the EvseUids field.
func (o *LocationReferences) SetEvseUids(v string) {
	o.EvseUids = &v
}

func (o LocationReferences) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocationReferences) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["location_id"] = o.LocationId
	if !IsNil(o.EvseUids) {
		toSerialize["evse_uids"] = o.EvseUids
	}
	return toSerialize, nil
}

type NullableLocationReferences struct {
	value *LocationReferences
	isSet bool
}

func (v NullableLocationReferences) Get() *LocationReferences {
	return v.value
}

func (v *NullableLocationReferences) Set(val *LocationReferences) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationReferences) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationReferences) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationReferences(val *LocationReferences) *NullableLocationReferences {
	return &NullableLocationReferences{value: val, isSet: true}
}

func (v NullableLocationReferences) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationReferences) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


